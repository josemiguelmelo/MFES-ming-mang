class MingMang
types


values
-- TODO Define values here
instance variables
	public board : Board;
	public playerX : Player;
	public playerY : Player;
	
	public currentPlayer : Player;
	
operations
	public MingMang : nat ==> MingMang
	MingMang(board_size) == (
		dcl playerPieces : nat := (board_size-1) * 2;
		
		playerX := new Player(playerPieces, Piece`WhiteType);
		playerY := new Player(playerPieces, Piece`BlackType);
		currentPlayer := playerX;
		
		board := new Board(board_size, playerX, playerY);
		
		return self;
	)
	pre board_size > 6
	post playerX.totalPieces = (board.boardSize-1)*2 
	and playerY.totalPieces = (board.boardSize-1)*2 
	and board.boardSize > 6;
	
	
	/** change player **/
	public changeCurrentPlayer : () ==> Player
	changeCurrentPlayer() == (
			currentPlayer := nextPlayer();
			return currentPlayer;
	)
	pre (currentPlayer = playerX or currentPlayer = playerY)
	post (currentPlayer = playerX or currentPlayer = playerY);
	
	public nextPlayer : () ==> Player
	nextPlayer() == (
			if currentPlayer = playerX then
					return playerY
			else 
					return playerX;
	);
	
	/** **/
	public emptyPosition : Coordinates ==> Position
	emptyPosition(coord) == ( return new Position(coord, Piece`UndefinedType));
	
	public checkHorizontalEat : Position * Player ==> bool
	checkHorizontalEat(pos, playerToEat) == (
	
			dcl rightPos : Position := board.getPieceAt(new Coordinates(pos.coord.x+1, pos.coord.y));
			dcl leftPos : Position := board.getPieceAt(new Coordinates(pos.coord.x-1, pos.coord.y));
							
			return rightPos.pieceType <> Piece`UndefinedType and leftPos.pieceType <> Piece`UndefinedType
			and rightPos.pieceType <> pos.pieceType and leftPos.pieceType <> pos.pieceType;
	)
	pre pos.coord.x > 1 and pos.coord.x < 7;
	
	public checkVerticalEat : Position * Player ==> bool
	checkVerticalEat(pos, playerToEat) == (
			dcl rightPos : Position := board.getPieceAt(new Coordinates(pos.coord.x, pos.coord.y+1));
			dcl leftPos : Position := board.getPieceAt(new Coordinates(pos.coord.x, pos.coord.y-1));
							
			return rightPos.pieceType <> Piece`UndefinedType and leftPos.pieceType <> Piece`UndefinedType
			and rightPos.pieceType <> pos.pieceType and leftPos.pieceType <> pos.pieceType;
	)
	pre pos.coord.y > 1 and pos.coord.y < 7;
	
	public canEat : Position * Player ==> bool
	canEat(position, playerToEat) == (
			return checkHorizontalEat(position, playerToEat) or checkVerticalEat(position, playerToEat);
	);
	
	
	public eat : Position * Player ==> ()
	eat(toEat, playerWillEat) == ( 		
			board.removePosition(toEat);
			toEat.setPieceType(playerWillEat.pieceType);
			board.insertPosition(toEat);
			return;
	)
	pre playerWillEat = playerX or playerWillEat = playerY
	and toEat.pieceType <> Piece`UndefinedType
	post toEat in set board.board
	and toEat.pieceType = playerWillEat.pieceType;
	
	
	public movePiece : Position * Position ==> bool
	movePiece(fromPosition, toPosition) == (
			dcl newPosition : Position := new Position(toPosition.coord, currentPlayer.getPieceType());
			board.removePosition(toPosition);
			board.removePosition(fromPosition);
			board.insertPosition(newPosition);
			board.insertPosition(emptyPosition(fromPosition.coord) );
			
			if canEat(newPosition, nextPlayer() ) then
				return true;
			
			return false;
	)
	pre (currentPlayer = playerX or currentPlayer = playerY)
	and (fromPosition.coord.x = toPosition.coord.x or fromPosition.coord.y = toPosition.coord.y)
	and fromPosition in set board.board
	and toPosition in set board.board
	and toPosition.pieceType = Piece`UndefinedType
	and fromPosition.pieceType = currentPlayer.pieceType
	post board.numPositions = board.boardSize * board.boardSize;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end MingMang