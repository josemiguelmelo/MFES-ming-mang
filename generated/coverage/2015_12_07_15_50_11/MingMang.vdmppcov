class MingMang
types


values
-- TODO Define values here
instance variables
	public board : Board;
	public playerX : Player;
	public playerY : Player;
	
	public currentPlayer : Player;
	
	public boards_history : seq of Board;
	
operations
	public MingMang : nat ==> MingMang
	MingMang(board_size) == (
		dcl playerPieces : nat := (board_size-1) * 2;
		
		playerX := new Player(playerPieces, Piece`WhiteType);
		playerY := new Player(playerPieces, Piece`BlackType);
		currentPlayer := playerX;
		
		board := new Board(board_size, playerX, playerY);
		
		boards_history := [board.clone()];
		
		
		return self;
	)
	pre board_size > 6
	post playerX.totalPieces = (board.boardSize-1)*2 
	and playerY.totalPieces = (board.boardSize-1)*2 
	and board.boardSize > 6;
	
	public printBoard : () ==> ()
	printBoard() ==
	(
		IO`print("\n");
		for counter1 = 1 to board.boardSize do
		(
			for counter2 = 1 to board.boardSize do
			(
				IO`print(board.getPieceTypeAtPosition(new Coordinates(counter2, counter1)));
			);
			IO`print("\n");
		);
		
		IO`print("\nPlayer ");
		IO`print(currentPlayer.pieceType);
	);
	
	
	/** change player **/
	public changeCurrentPlayer : () ==> Player
	changeCurrentPlayer() == (
			currentPlayer := nextPlayer();
			return currentPlayer;
	)
	pre (currentPlayer = playerX or currentPlayer = playerY)
	post (currentPlayer = playerX or currentPlayer = playerY);
	
	/** get next player to play **/
	public nextPlayer : () ==> Player
	nextPlayer() == (
			if currentPlayer = playerX then
					return playerY
			else 
					return playerX;
	);
	
	public getOtherPlayerPieceType : Piece`PieceType ==> Piece`PieceType
	getOtherPlayerPieceType(pieceType) == (
			if pieceType = Piece`WhiteType then
				return Piece`BlackType;
			return Piece`WhiteType;
	);
	
	
	/** return a position without any player piece **/
	public emptyPosition : Coordinates ==> Position
	emptyPosition(coord) == ( return new Position(coord, Piece`UndefinedType));
	
	/** Check if piece can be captured horizontally **/
	public checkHorizontalCapture : Position  ==> bool
	checkHorizontalCapture(pos) == (
	
			dcl rightPos : Position := board.getPieceAt(new Coordinates(pos.coord.x+1, pos.coord.y));
			dcl leftPos : Position := board.getPieceAt(new Coordinates(pos.coord.x-1, pos.coord.y));
							
			return rightPos.pieceType <> Piece`UndefinedType and leftPos.pieceType <> Piece`UndefinedType
			and rightPos.pieceType <> pos.pieceType and leftPos.pieceType <> pos.pieceType;
	)
	pre pos.coord.x > 1 and pos.coord.x < 8;
	
	/** Check if piece can be captured horizontally **/
	public checkVerticalCapture : Position  ==> bool
	checkVerticalCapture(pos) == (
			dcl rightPos : Position := board.getPieceAt(new Coordinates(pos.coord.x, pos.coord.y+1));
			dcl leftPos : Position := board.getPieceAt(new Coordinates(pos.coord.x, pos.coord.y-1));
							
			return rightPos.pieceType <> Piece`UndefinedType and leftPos.pieceType <> Piece`UndefinedType
			and rightPos.pieceType <> pos.pieceType and leftPos.pieceType <> pos.pieceType;
	)
	pre pos.coord.y > 1 and pos.coord.y < 8;
	
	/** check if position can be captured **/
	public canCapture : Position ==> bool
	canCapture(position) == (
			return checkHorizontalCapture(position) or checkVerticalCapture(position);
	);
	
	public hasPossibleMoves : Position ==> bool
	hasPossibleMoves(p) ==
	(
		dcl upPos : Position;
		dcl downPos : Position;
		dcl leftPos : Position;
		dcl rightPos : Position;
		
		dcl upC : Coordinates := p.coord;
		dcl downC : Coordinates := p.coord;
		dcl leftC : Coordinates := p.coord;
		dcl rightC : Coordinates := p.coord;
		upC.y := upC.y-1;
		downC.y := upC.y+1;
		leftC.x := upC.x-1;
		rightC.x := upC.x+1;
		
		upPos := board.getPieceAt(upC);
		downPos := board.getPieceAt(downC);
		leftPos := board.getPieceAt(leftC);
		rightPos := board.getPieceAt(rightC);
		
		if (upPos.pieceType <> Piece`UndefinedType or	
		downPos.pieceType <> Piece`UndefinedType or	
		leftPos.pieceType <> Piece`UndefinedType or	
		rightPos.pieceType <> Piece`UndefinedType) then
		(
			return true;
		);
		
		return false;
	);
	
	public isGameFinished : () ==> bool
	isGameFinished() == (
		if(playerX.totalPieces = 0 or playerY.totalPieces = 0) then return true;
		
		for counter1 = 1 to board.boardSize do
		(
			for counter2 = 1 to board.boardSize do
			(
				if board.getPieceTypeAtPosition(new Coordinates(counter2, counter1)) = nextPlayer().pieceType then
				(
					if hasPossibleMoves(board.getPieceAt(new Coordinates(counter2, counter1))) then
						return false;
				);
				
			);
		);
		return true;
	);
	
	/** capture position **/
	public capture : Position * Piece`PieceType ==> ()
	capture(toEat, playerWillEat) == (
			toEat.setPieceType(playerWillEat);

			if currentPlayer = playerX then
			(
				playerX.totalPieces := playerX.totalPieces + 1;
				playerY.totalPieces := playerY.totalPieces - 1;
			) else (
				playerX.totalPieces := playerX.totalPieces - 1;
				playerY.totalPieces := playerY.totalPieces + 1;
			);
			return;
	)
	pre (playerWillEat = playerX.pieceType or playerWillEat = playerY.pieceType)
	and toEat.pieceType <> Piece`UndefinedType
	post toEat in set board.board
	and toEat.pieceType = playerWillEat;
	
	
	public move : Coordinates * Coordinates ==> ()
	move(fromC, toC) ==
	(
		if movePiece(board.getPieceAt(fromC), board.getPieceAt(toC)) then
			currentPlayer := changeCurrentPlayer()
		else IO`print("Sim");
	);
	
	/** move piece from position to position **/
	public movePiece : Position * Position ==> bool
	movePiece(fromPosition, toPosition) == (
			dcl pieceTypeAux : Piece`PieceType := fromPosition.pieceType;
			fromPosition.setPieceType(toPosition.pieceType);
			toPosition.setPieceType(pieceTypeAux);
		
			for all pos in set board.board do
			(
					if (pos.coord.x > 1 and pos.coord.x < 8 and pos.coord.y > 1 and pos.coord.y < 8 and pos.pieceType <> Piece`UndefinedType) then
					(
							if canCapture(pos) then
									capture(pos, getOtherPlayerPieceType(pos.pieceType) );
					)
			);
			
			for b in boards_history do 
			(
					if b.compare(board) then
					(
							IO`print("HERE");
							pieceTypeAux := fromPosition.pieceType;
							fromPosition.setPieceType(toPosition.pieceType);
							toPosition.setPieceType(pieceTypeAux);
							return false;
					)
			);
			boards_history := boards_history ^ [board.clone()];
			return true;
	)
	pre (currentPlayer = playerX or currentPlayer = playerY)
	and (fromPosition.coord.x = toPosition.coord.x or fromPosition.coord.y = toPosition.coord.y)
	and fromPosition in set board.board
	and toPosition in set board.board
	and toPosition.pieceType = Piece`UndefinedType
	and fromPosition.pieceType = currentPlayer.pieceType
	post board.numPositions = board.boardSize * board.boardSize ;
	
functions

traces
-- TODO Define Combinatorial Test Traces here
end MingMang