class Board
types


values
-- TODO Define values here
instance variables
	public board : set of Position;
	public boardSize : nat;
	public numPositions :nat;
	
	inv boardSize > 7;

operations
	
	
	public Board : nat ==> Board
	Board(board_size) == (
		dcl playerX :Player  := new Player((board_size-1) * 2, Piece`WhiteType);
		boardSize := board_size;
		board := {};
		numPositions := 0;
		init(playerX, playerX);
		return self;
	);
	
	public Board : nat * Player * Player ==> Board
	Board(board_size, playerX, playerY) == (
		boardSize := board_size;
		board := {};
		numPositions := 0;
		
		init(playerX, playerY);
		
		return self;
	)
	post playerX.totalPieces = playerY.totalPieces and numPositions=boardSize * boardSize;
	
	/**
		Inititalize board 
	*/
	public init : Player * Player ==> ()
	init(playerX, playerY) == 
	(
		for i = 1 to boardSize by 1 do
		(
			dcl pieceType : Piece`PieceType := Piece`UndefinedType;
			dcl position : Position;
			for j = 1 to boardSize by 1 do
			(
				pieceType := Piece`UndefinedType;
				
				if i = 1 then
				(	pieceType := playerY.getPieceType(); );
				if i = boardSize then
				(	pieceType := playerX.getPieceType(); );
				if j = 1 then
				(pieceType := playerX.getPieceType(); );
				if j = boardSize then
				(	pieceType := playerY.getPieceType(); );
			
				position := new Position(new Coordinates(j, i), pieceType);
				board := board union {position};
				
			);
		);
		
		
		numPositions := card board;
	);
	
	public getBoardSize : () ==> nat
	getBoardSize() == ( return boardSize; );
	
	public getNumPositions : () ==> nat
	getNumPositions() == ( return numPositions; );
	
	public numPieces : Piece`PieceType ==> nat
	numPieces(pieceType) == (
		dcl counter : nat := 0;
		
		for all position in set board do 
		(
				if position.getPieceType() = pieceType then
						counter := counter + 1;
		);
		return counter;
	);
	

	public getPieceTypeAtPosition : Coordinates ==> Piece`PieceType
	getPieceTypeAtPosition(coord) ==
	(
			return getPieceAt(coord).pieceType;
	)
	pre boardSize >= coord.x and boardSize >= coord.y;
	
	public getPieceAt : Coordinates ==> Position
	getPieceAt(coord) ==
	(
			dcl pieceType : Position ;
			
			for all position in set board do 
			(
					if position.compareToPositionCoordinates(coord) then
							pieceType := position;
			);
			
			return pieceType;
	)
	pre boardSize >= coord.x and boardSize >= coord.y;

	private posInBoard : Position ==> bool
	posInBoard(pos) == (
		for all position in set board do
		(
				if(pos.coord.x = position.coord.x and 
				pos.coord.y = position.coord.y and 
				pos.pieceType = position.pieceType) then
					return true;
		);
		return false;
	);
	
	public compare : Board ==> bool
	compare(b) == (
			for all pos in set b.board do
			(
				if (posInBoard(pos) = false) then
				(	return false;);
			);
			return true;
	);

	public clone : () ==> Board
	clone() == (
			dcl b : Board := new Board(boardSize);
			dcl board_new : set of Position := {};
			for all p in set board do(
					board_new := board_new union { new Position(new Coordinates(p.coord.x, p.coord.y), p.pieceType) };
			);
			b.board := board_new;
			return b;
	);
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board