class MingMangTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private boardSize : nat := 8;
	private mingmangGame : MingMang := new MingMang(boardSize);
	
operations

		private assertTrue: bool ==> ()
              assertTrue(cond) == return
              pre cond;
                
    private testMingMangBoardCreation: () ==> ()
    testMingMangBoardCreation() ==
    (
				
          assertTrue(mingmangGame.board.getBoardSize() = boardSize);
          assertTrue(mingmangGame.board.getNumPositions() = boardSize*boardSize);
          
          
          assertTrue(mingmangGame.board.numPieces(Piece`WhiteType) = (boardSize-1)*2);
          assertTrue(mingmangGame.board.numPieces(Piece`BlackType) = (boardSize-1)*2);
          assertTrue(mingmangGame.board.numPieces(Piece`UndefinedType) = ((boardSize*boardSize)-(4*(boardSize-1))));
    );
    
    private testMingMangPlayersCreation: () ==> ()
    testMingMangPlayersCreation() ==
    (
    		dcl playerX : Player := mingmangGame.playerX;
    		dcl playerY : Player := mingmangGame.playerY;
    		dcl board : Board := mingmangGame.board;
    		
    		
				assertTrue(playerX.getTotalPieces() = (boardSize-1)*2);
				assertTrue(playerY.getTotalPieces() = (boardSize-1)*2);
				
				assertTrue(playerX.getPieceType() <> playerY.getPieceType());
				assertTrue(playerX.getPieceType() <> Piece`UndefinedType);
				assertTrue(playerY.getPieceType() <> Piece`UndefinedType);
				
				
				assertTrue(board.numPieces(playerX.getPieceType()) = playerX.getTotalPieces());
				assertTrue(board.numPieces(playerY.getPieceType()) = playerY.getTotalPieces());
				
				assertTrue( mingmangGame.currentPlayer = playerY or mingmangGame.currentPlayer = playerX );
    );
    
    
    
    private testMingMangChangeCurrentPlayer: () ==> ()
    testMingMangChangeCurrentPlayer() ==
    (
    		dcl playerX : Player := mingmangGame.playerX;
    		dcl playerY : Player := mingmangGame.playerY;
				dcl currentPlayer : Player := mingmangGame.currentPlayer;
    		dcl initialPlayer : Player := currentPlayer;
    		
				assertTrue( currentPlayer = playerY or currentPlayer = playerX );
    		
				currentPlayer := mingmangGame.changeCurrentPlayer();
				
				assertTrue( (currentPlayer = playerY or currentPlayer = playerX) and currentPlayer <> initialPlayer );
    );
    
		
		private testMingMangRemovePosition: () ==> ()
		testMingMangRemovePosition() ==
		(
				dcl c : Coordinates := new Coordinates(8,7);
				
				mingmangGame.board.removePosition(mingmangGame.board.getPieceAt(c));
				
				assertTrue( card mingmangGame.board.board = 63);
				for all pos in set mingmangGame.board.board do
				( 	
						dcl c2 : Coordinates := pos.coord;
						assertTrue( c.compare(c2) = false ); 
				)
				
		);
		
		private testMingMangMove : () ==> ()
		testMingMangMove() == 
		(
		
				dcl fromC : Coordinates := new Coordinates(1, 6);
				dcl toC : Coordinates := new Coordinates(2, 6);
				dcl pieceFrom : Piece`PieceType;
				dcl pieceTo : Piece`PieceType;

				dcl currentPlayer : Player ;
    		dcl initialPlayer : Player ;
				
				mingmangGame := new MingMang(boardSize);
				
				currentPlayer := mingmangGame.currentPlayer;
				initialPlayer := mingmangGame.currentPlayer;
				
				if mingmangGame.movePiece(mingmangGame.board.getPieceAt(fromC), mingmangGame.board.getPieceAt(toC)) then
				(
					currentPlayer := mingmangGame.changeCurrentPlayer();
					pieceFrom := mingmangGame.board.getPieceAt(fromC).pieceType;
					pieceTo := mingmangGame.board.getPieceAt(toC).pieceType;
					assertTrue(pieceTo = initialPlayer.pieceType ); 
					assertTrue(mingmangGame.currentPlayer <> initialPlayer ); 
					assertTrue(pieceFrom = Piece`UndefinedType);
				);
				
				currentPlayer := mingmangGame.changeCurrentPlayer();
				
				if mingmangGame.movePiece(mingmangGame.board.getPieceAt(toC), mingmangGame.board.getPieceAt(fromC)) then
				(
					currentPlayer := mingmangGame.changeCurrentPlayer();
					pieceFrom := mingmangGame.board.getPieceAt(fromC).pieceType;
					pieceTo := mingmangGame.board.getPieceAt(toC).pieceType;
					assertTrue(pieceTo = initialPlayer.pieceType ); 
					assertTrue(mingmangGame.currentPlayer <> initialPlayer ); 
					assertTrue(pieceFrom = Piece`UndefinedType);
				)else(
					IO`print("nao moveu");
				);
				
		);
		
		private testMingMangCapturePiece : () ==> ()
		testMingMangCapturePiece() == (
				dcl fromC : Coordinates := new Coordinates(8, 7);
				dcl toC : Coordinates := new Coordinates(2, 7);
				dcl pieceFrom : Piece`PieceType;
				dcl pieceTo : Piece`PieceType;
				
				dcl currentPlayer : Player := mingmangGame.currentPlayer;
    		dcl initialPlayer : Player := currentPlayer;
				
				if mingmangGame.movePiece(mingmangGame.board.getPieceAt(fromC), mingmangGame.board.getPieceAt(toC)) then
				(
					currentPlayer := mingmangGame.changeCurrentPlayer();
				
					pieceFrom := mingmangGame.board.getPieceAt(fromC).pieceType;
					pieceTo := mingmangGame.board.getPieceAt(toC).pieceType;
					
					assertTrue(currentPlayer <> initialPlayer);
					assertTrue(pieceTo = currentPlayer.pieceType ); 
					assertTrue(pieceFrom = Piece`UndefinedType);
				);
		);
    
    
		private testMingMangEndGame : () ==> ()
		testMingMangEndGame() == (
				
				dcl boardEnd : Board := new Board(boardSize, mingmangGame.playerX, mingmangGame.playerY, true);
				
				mingmangGame.board := boardEnd;
				mingmangGame.playerX.totalPieces := mingmangGame.board.numPieces(mingmangGame.playerX.pieceType);
				mingmangGame.playerY.totalPieces := mingmangGame.board.numPieces(mingmangGame.playerY.pieceType);
				assertTrue(mingmangGame.isGameFinished() = true);
		);
    
    
    public static main: () ==> ()
    main() ==
    (
            dcl test : MingMangTest := new MingMangTest();
            test.testMingMangBoardCreation();
            test.testMingMangPlayersCreation();
            test.testMingMangChangeCurrentPlayer();
            test.testMingMangRemovePosition();
            test.testMingMangMove();
           -- test.testMingMangCapturePiece();
            test.testMingMangEndGame();
    );
                
    
              
               
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end MingMangTest