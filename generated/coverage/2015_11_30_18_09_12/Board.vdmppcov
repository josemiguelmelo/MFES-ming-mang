class Board
types


values
-- TODO Define values here
instance variables
	public board : set of Position;
	
	private boardSize : nat;
	private numPositions :nat;
	inv boardSize > 7;

operations
	
	public Board : nat ==> Board
	Board(board_size) == (
		boardSize := board_size;
		board := {};
		numPositions := 0;
		
		for i = 1 to board_size by 1 do
		(
			dcl pieceType : Piece`PieceType := <UNDEFINED>;
			dcl position : Position;
			for j = 1 to board_size by 1 do
			(
				pieceType := <UNDEFINED>;
				
				if i = 1 then
				(	pieceType := <BLACK>; );
				if i = board_size then
				(	pieceType := <WHITE>; );
				if j = 1 then
				(pieceType := <WHITE>; );
				if j = board_size then
				(	pieceType := <BLACK>; );
				
			
			
				position := new Position(j,i, pieceType);
				board := board union {position};
				
				numPositions := numPositions+1;
				
			);
		);
		return self;
	);
	
	public getBoardSize : () ==> nat
	getBoardSize() == ( return boardSize; );
	
	
	public getNumPositions : () ==> nat
	getNumPositions() == ( return numPositions; );
	
	public numPieces : Piece`PieceType ==> nat
	numPieces(pieceType) == (
		dcl counter : nat := 0;
		
		for all position in set board do 
		(
				if position.getPieceType() = pieceType then
						counter := counter + 1;
		);
		return counter;
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board